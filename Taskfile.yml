version: '3'

tasks:
  install-linter:
    desc: Install golangci-lint based on the GOOS value from go env
    cmds:
      - |
        GOOS=$(go env GOOS)
        case "$GOOS" in
          "windows")
            if command -v choco > /dev/null; then
              echo "Installing golangci-lint with Chocolatey..."
              choco install golangci-lint
              exit 0
            else
              echo "Error: Chocolatey is not installed. Please install it first: https://chocolatey.org/install"
              exit 1
            fi
            ;;
          "darwin")
            if command -v brew > /dev/null; then
              echo "Installing golangci-lint with Homebrew..."
              brew install golangci-lint
              exit 0
            else
              echo "Error: Homebrew is not installed. Please install it first: https://brew.sh/"
              exit 1
            fi
            ;;
          "linux")
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              if [ "$ID" = "ubuntu" ]; then
                echo "Ubuntu detected. Installing golangci-lint using snap..."
                sudo snap install golangci-lint --classic
                exit 0
              else
                echo "Linux detected, but not Ubuntu. Please install golangci-lint using your package manager."
                echo "Examples:"
                echo "  apt: sudo apt install golangci-lint"
                echo "  yum: sudo yum install golangci-lint"
                echo "  pacman: sudo pacman -S golangci-lint"
                exit 0
              fi
            else
              echo "Linux detected, but OS information could not be determined."
              echo "Please install golangci-lint using your package manager."
              exit 0
            fi
            exit 1
            ;;
          *)
            echo "Unsupported OS: $GOOS"
            exit 1
            ;;
        esac
  lint:
      desc: Run linters using golangci-lint
      cmds:
        - golangci-lint run --config .golangci.yml
      silent: true

  docker-test:
    desc: Run tests
    dir: .docker
    cmd: docker compose -f docker-compose.server.yml run --rm server go test -cover ./...

  docker-restart:
    desc: Restart all services
    dir: .docker
    cmd: docker compose restart
  
  docker-stop:
    desc: Stop all services
    dir: .docker
    cmd: docker compose down

  docker-start:
    desc: Start all services
    dir: .docker
    cmd: docker compose up

  server-db:
    desc: Start server with db storage
    dir: .docker
    cmd: docker compose -f docker-compose.server.yml up

  docker-start-agent:
    desc: Start agent
    dir: .docker
    cmd: docker compose run -e KEY=secret --rm agent 

  genmock-*:
    desc: exec "task genmock-OrdersRepository -- internal/server/entities"
          then rename internal/server/entities/mocks/CreateOrderService to snake case
    vars:
      STRUCT: '{{index .MATCH 0}}'
    cmds:
      - mockgen -package=mocks -destination={{.CLI_ARGS}}/mocks/{{.STRUCT}}.go github.com/vysogota0399/mem_stats_monitoring/{{.CLI_ARGS}} {{.STRUCT}}



  start_server:
    desc: start go process for server
    env:
      ADDRESS: 127.0.0.1:8080
      LOG_LEVEL: -1
      DATABASE_DSN: postgres://postgres:secret@127.0.0.1:5432/mem_stats_monitoring_server
    cmds:
      - go run cmd/server/main.go


  start_agent:
    desc: start go process for agent
    env:
      ADDRESS: 127.0.0.1:8080
      LOG_LEVEL: -1
      REPORT_INTERVAL: 5
    cmds:
      - go run cmd/agent/main.go

  start_agent_with_profile:
    desc: start go process for agent
    env:
      ADDRESS: 127.0.0.1:8080
      LOG_LEVEL: 0
      REPORT_INTERVAL: 5
      PPROF_DURATION: 30
    cmds:
      - go run cmd/agent/main.go

  server_profile:
    desc: save server profile
    cmds:
      - go tool pprof -http=":9090" -seconds=30 http://127.0.0.1:8080/debug/pprof/heap

  doc:
    desc: godoc
    cmds:
      - cp -r . /tmp/godoc/src/mem_stats_monitoring
      - godoc -http=:8010 -goroot="/tmp/godoc"

  server-test-coverage:
    dir: internal/server
    cmds:
      - go clean -testcache
      - go test -count 1 ./... -coverprofile=coverage.out
      - go tool cover -func=coverage.out

  agent-test-coverage:
    dir: internal/agent
    cmds:
    - go clean -testcache
    - go test ./... -coverprofile=coverage.out
    - go tool cover -func=coverage.out