// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/pkg/gen/services/metrics (interfaces: MetricsServiceClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metrics "github.com/vysogota0399/mem_stats_monitoring/pkg/gen/services/metrics"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockMetricsServiceClient is a mock of MetricsServiceClient interface.
type MockMetricsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceClientMockRecorder
}

// MockMetricsServiceClientMockRecorder is the mock recorder for MockMetricsServiceClient.
type MockMetricsServiceClientMockRecorder struct {
	mock *MockMetricsServiceClient
}

// NewMockMetricsServiceClient creates a new mock instance.
func NewMockMetricsServiceClient(ctrl *gomock.Controller) *MockMetricsServiceClient {
	mock := &MockMetricsServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServiceClient) EXPECT() *MockMetricsServiceClientMockRecorder {
	return m.recorder
}

// Index mocks base method.
func (m *MockMetricsServiceClient) Index(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*metrics.IndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Index", varargs...)
	ret0, _ := ret[0].(*metrics.IndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Index indicates an expected call of Index.
func (mr *MockMetricsServiceClientMockRecorder) Index(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Index", reflect.TypeOf((*MockMetricsServiceClient)(nil).Index), varargs...)
}

// Ping mocks base method.
func (m *MockMetricsServiceClient) Ping(arg0 context.Context, arg1 *emptypb.Empty, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ping", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ping indicates an expected call of Ping.
func (mr *MockMetricsServiceClientMockRecorder) Ping(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockMetricsServiceClient)(nil).Ping), varargs...)
}

// Show mocks base method.
func (m *MockMetricsServiceClient) Show(arg0 context.Context, arg1 *metrics.ShowMetricParams, arg2 ...grpc.CallOption) (*metrics.ShowMetricResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Show", varargs...)
	ret0, _ := ret[0].(*metrics.ShowMetricResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockMetricsServiceClientMockRecorder) Show(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockMetricsServiceClient)(nil).Show), varargs...)
}

// Update mocks base method.
func (m *MockMetricsServiceClient) Update(arg0 context.Context, arg1 *metrics.UpdateMetricParams, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricsServiceClientMockRecorder) Update(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricsServiceClient)(nil).Update), varargs...)
}

// UpdateBatch mocks base method.
func (m *MockMetricsServiceClient) UpdateBatch(arg0 context.Context, arg1 *metrics.UpdateMetricsBatchParams, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBatch", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockMetricsServiceClientMockRecorder) UpdateBatch(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockMetricsServiceClient)(nil).UpdateBatch), varargs...)
}
