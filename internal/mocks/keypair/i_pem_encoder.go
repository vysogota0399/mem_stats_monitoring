// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/internal/keypair (interfaces: IPemEncoder)

// Package mocks is a generated GoMock package.
package mocks

import (
	pem "encoding/pem"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIPemEncoder is a mock of IPemEncoder interface.
type MockIPemEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockIPemEncoderMockRecorder
}

// MockIPemEncoderMockRecorder is the mock recorder for MockIPemEncoder.
type MockIPemEncoderMockRecorder struct {
	mock *MockIPemEncoder
}

// NewMockIPemEncoder creates a new mock instance.
func NewMockIPemEncoder(ctrl *gomock.Controller) *MockIPemEncoder {
	mock := &MockIPemEncoder{ctrl: ctrl}
	mock.recorder = &MockIPemEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPemEncoder) EXPECT() *MockIPemEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockIPemEncoder) Encode(arg0 io.Writer, arg1 *pem.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockIPemEncoderMockRecorder) Encode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIPemEncoder)(nil).Encode), arg0, arg1)
}
