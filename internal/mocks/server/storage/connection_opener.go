// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/internal/server/storage (interfaces: ConnectionOpener)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/vysogota0399/mem_stats_monitoring/internal/server/storage/interfaces"
)

// MockConnectionOpener is a mock of ConnectionOpener interface.
type MockConnectionOpener struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionOpenerMockRecorder
}

// MockConnectionOpenerMockRecorder is the mock recorder for MockConnectionOpener.
type MockConnectionOpenerMockRecorder struct {
	mock *MockConnectionOpener
}

// NewMockConnectionOpener creates a new mock instance.
func NewMockConnectionOpener(ctrl *gomock.Controller) *MockConnectionOpener {
	mock := &MockConnectionOpener{ctrl: ctrl}
	mock.recorder = &MockConnectionOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionOpener) EXPECT() *MockConnectionOpenerMockRecorder {
	return m.recorder
}

// OpenDB mocks base method.
func (m *MockConnectionOpener) OpenDB(arg0 context.Context, arg1 string) (interfaces.IDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenDB", arg0, arg1)
	ret0, _ := ret[0].(interfaces.IDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenDB indicates an expected call of OpenDB.
func (mr *MockConnectionOpenerMockRecorder) OpenDB(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenDB", reflect.TypeOf((*MockConnectionOpener)(nil).OpenDB), arg0, arg1)
}
