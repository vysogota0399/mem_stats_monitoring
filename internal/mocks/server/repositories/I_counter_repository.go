// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/internal/server/repositories (interfaces: ICounterRepository)

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vysogota0399/mem_stats_monitoring/internal/server/models"
)

// MockICounterRepository is a mock of ICounterRepository interface.
type MockICounterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICounterRepositoryMockRecorder
}

// MockICounterRepositoryMockRecorder is the mock recorder for MockICounterRepository.
type MockICounterRepositoryMockRecorder struct {
	mock *MockICounterRepository
}

// NewMockICounterRepository creates a new mock instance.
func NewMockICounterRepository(ctrl *gomock.Controller) *MockICounterRepository {
	mock := &MockICounterRepository{ctrl: ctrl}
	mock.recorder = &MockICounterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICounterRepository) EXPECT() *MockICounterRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockICounterRepository) All(arg0 context.Context) ([]models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockICounterRepositoryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockICounterRepository)(nil).All), arg0)
}

// Create mocks base method.
func (m *MockICounterRepository) Create(arg0 context.Context, arg1 *models.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICounterRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICounterRepository)(nil).Create), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockICounterRepository) FindByName(arg0 context.Context, arg1 string) (models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockICounterRepositoryMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockICounterRepository)(nil).FindByName), arg0, arg1)
}

// SaveCollection mocks base method.
func (m *MockICounterRepository) SaveCollection(arg0 context.Context, arg1 []models.Counter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollection indicates an expected call of SaveCollection.
func (mr *MockICounterRepositoryMockRecorder) SaveCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollection", reflect.TypeOf((*MockICounterRepository)(nil).SaveCollection), arg0, arg1)
}

// SearchByName mocks base method.
func (m *MockICounterRepository) SearchByName(arg0 context.Context, arg1 []string) ([]models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByName", arg0, arg1)
	ret0, _ := ret[0].([]models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByName indicates an expected call of SearchByName.
func (mr *MockICounterRepositoryMockRecorder) SearchByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByName", reflect.TypeOf((*MockICounterRepository)(nil).SearchByName), arg0, arg1)
}
