// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/internal/server/repositories (interfaces: IGaugeRepository)

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/vysogota0399/mem_stats_monitoring/internal/server/models"
)

// MockIGaugeRepository is a mock of IGaugeRepository interface.
type MockIGaugeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGaugeRepositoryMockRecorder
}

// MockIGaugeRepositoryMockRecorder is the mock recorder for MockIGaugeRepository.
type MockIGaugeRepositoryMockRecorder struct {
	mock *MockIGaugeRepository
}

// NewMockIGaugeRepository creates a new mock instance.
func NewMockIGaugeRepository(ctrl *gomock.Controller) *MockIGaugeRepository {
	mock := &MockIGaugeRepository{ctrl: ctrl}
	mock.recorder = &MockIGaugeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGaugeRepository) EXPECT() *MockIGaugeRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockIGaugeRepository) All(arg0 context.Context) ([]models.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", arg0)
	ret0, _ := ret[0].([]models.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockIGaugeRepositoryMockRecorder) All(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockIGaugeRepository)(nil).All), arg0)
}

// Create mocks base method.
func (m *MockIGaugeRepository) Create(arg0 context.Context, arg1 *models.Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIGaugeRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIGaugeRepository)(nil).Create), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockIGaugeRepository) FindByName(arg0 context.Context, arg1 string) (models.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1)
	ret0, _ := ret[0].(models.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockIGaugeRepositoryMockRecorder) FindByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockIGaugeRepository)(nil).FindByName), arg0, arg1)
}

// SaveCollection mocks base method.
func (m *MockIGaugeRepository) SaveCollection(arg0 context.Context, arg1 []models.Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCollection indicates an expected call of SaveCollection.
func (mr *MockIGaugeRepositoryMockRecorder) SaveCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCollection", reflect.TypeOf((*MockIGaugeRepository)(nil).SaveCollection), arg0, arg1)
}
