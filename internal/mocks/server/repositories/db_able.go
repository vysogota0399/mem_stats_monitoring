// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/repositories/counter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/vysogota0399/mem_stats_monitoring/internal/server/storage"
)

// MockDBAble is a mock of DBAble interface.
type MockDBAble struct {
	ctrl     *gomock.Controller
	recorder *MockDBAbleMockRecorder
}

// MockDBAbleMockRecorder is the mock recorder for MockDBAble.
type MockDBAbleMockRecorder struct {
	mock *MockDBAble
}

// NewMockDBAble creates a new mock instance.
func NewMockDBAble(ctrl *gomock.Controller) *MockDBAble {
	mock := &MockDBAble{ctrl: ctrl}
	mock.recorder = &MockDBAbleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBAble) EXPECT() *MockDBAbleMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockDBAble) All() map[string]map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].(map[string]map[string][]string)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockDBAbleMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockDBAble)(nil).All))
}

// BeginTx mocks base method.
func (m *MockDBAble) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockDBAbleMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockDBAble)(nil).BeginTx), ctx, opts)
}

// CommitTx mocks base method.
func (m *MockDBAble) CommitTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTx indicates an expected call of CommitTx.
func (mr *MockDBAbleMockRecorder) CommitTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTx", reflect.TypeOf((*MockDBAble)(nil).CommitTx), ctx, tx)
}

// Last mocks base method.
func (m *MockDBAble) Last(mType, mName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", mType, mName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockDBAbleMockRecorder) Last(mType, mName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockDBAble)(nil).Last), mType, mName)
}

// Push mocks base method.
func (m *MockDBAble) Push(mType, mName string, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", mType, mName, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockDBAbleMockRecorder) Push(mType, mName, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockDBAble)(nil).Push), mType, mName, val)
}

// QueryRowContext mocks base method.
func (m *MockDBAble) QueryRowContext(ctx context.Context, query string, args any, result storage.ResultFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRowContext", ctx, query, args, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockDBAbleMockRecorder) QueryRowContext(ctx, query, args, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockDBAble)(nil).QueryRowContext), ctx, query, args, result)
}

// RollbackTx mocks base method.
func (m *MockDBAble) RollbackTx(ctx context.Context, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTx", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTx indicates an expected call of RollbackTx.
func (mr *MockDBAbleMockRecorder) RollbackTx(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTx", reflect.TypeOf((*MockDBAble)(nil).RollbackTx), ctx, tx)
}
