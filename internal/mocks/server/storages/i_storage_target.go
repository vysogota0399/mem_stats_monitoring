// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/vysogota0399/mem_stats_monitoring/internal/server/storages (interfaces: IStorageTarget)

// Package storages is a generated GoMock package.
package storages

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStorageTarget is a mock of IStorageTarget interface.
type MockIStorageTarget struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageTargetMockRecorder
}

// MockIStorageTargetMockRecorder is the mock recorder for MockIStorageTarget.
type MockIStorageTargetMockRecorder struct {
	mock *MockIStorageTarget
}

// NewMockIStorageTarget creates a new mock instance.
func NewMockIStorageTarget(ctrl *gomock.Controller) *MockIStorageTarget {
	mock := &MockIStorageTarget{ctrl: ctrl}
	mock.recorder = &MockIStorageTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorageTarget) EXPECT() *MockIStorageTargetMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockIStorageTarget) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockIStorageTargetMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockIStorageTarget)(nil).CreateOrUpdate), arg0, arg1, arg2)
}

// Tx mocks base method.
func (m *MockIStorageTarget) Tx(arg0 context.Context, arg1 ...func(context.Context) error) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Tx", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockIStorageTargetMockRecorder) Tx(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockIStorageTarget)(nil).Tx), varargs...)
}
