// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package clients

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(in *jlexer.Lexer, out *semaphore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(out *jwriter.Writer, in semaphore) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v semaphore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v semaphore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *semaphore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *semaphore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients(l, v)
}
func easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(in *jlexer.Lexer, out *Reporter) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(out *jwriter.Writer, in Reporter) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Reporter) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Reporter) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Reporter) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Reporter) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients1(l, v)
}
func easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(in *jlexer.Lexer, out *MetricsBodyAlias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delta":
			out.Delta = int(in.Int())
		case "value":
			out.Value = float64(in.Float64())
		case "id":
			out.MName = string(in.String())
		case "type":
			out.MType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(out *jwriter.Writer, in MetricsBodyAlias) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delta != 0 {
		const prefix string = ",\"delta\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.Delta))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MName))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MetricsBodyAlias) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsBodyAlias) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricsBodyAlias) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsBodyAlias) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients2(l, v)
}
func easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients3(in *jlexer.Lexer, out *MetricsBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.MName = string(in.String())
		case "type":
			out.MType = string(in.String())
		case "delta":
			out.Delta = string(in.String())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients3(out *jwriter.Writer, in MetricsBody) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.MName))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MType))
	}
	if in.Delta != "" {
		const prefix string = ",\"delta\":"
		out.RawString(prefix)
		out.String(string(in.Delta))
	}
	if in.Value != "" {
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MetricsBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF860cb9bEncodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MetricsBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MetricsBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF860cb9bDecodeGithubComVysogota0399MemStatsMonitoringInternalAgentClients3(l, v)
}
